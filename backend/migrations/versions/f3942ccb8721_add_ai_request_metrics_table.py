"""Add AI request metrics table

Revision ID: f3942ccb8721
Revises: 08e4f1a33466
Create Date: 2025-10-07 23:07:26.040886

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f3942ccb8721'
down_revision: Union[str, None] = '08e4f1a33466'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_request_metrics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='用户ID'),
    sa.Column('conversation_id', sa.UUID(), nullable=True, comment='会话ID'),
    sa.Column('user_message', sa.Text(), nullable=False, comment='用户消息内容'),
    sa.Column('ai_response', sa.Text(), nullable=True, comment='AI响应内容'),
    sa.Column('intent_type', sa.String(length=50), nullable=False, comment='意图类型: greeting/data_query/advice_request/etc'),
    sa.Column('intent_confidence', sa.Float(), nullable=False, comment='意图分类置信度(0-1)'),
    sa.Column('complexity_score', sa.Integer(), nullable=False, comment='复杂度分数(1-10)'),
    sa.Column('complexity_base', sa.Integer(), nullable=True, comment='基础复杂度'),
    sa.Column('complexity_context', sa.Integer(), nullable=True, comment='上下文调整'),
    sa.Column('complexity_user_pattern', sa.Integer(), nullable=True, comment='用户模式调整'),
    sa.Column('complexity_depth', sa.Integer(), nullable=True, comment='对话深度调整'),
    sa.Column('complexity_technical', sa.Integer(), nullable=True, comment='专业程度调整'),
    sa.Column('provider_used', sa.String(length=50), nullable=False, comment='实际使用的AI提供商: openai_gpt5/claude_sonnet_4/local_phi/etc'),
    sa.Column('routing_reason', sa.String(length=200), nullable=True, comment='路由决策理由'),
    sa.Column('prompt_tokens', sa.Integer(), nullable=True, comment='提示词token数'),
    sa.Column('completion_tokens', sa.Integer(), nullable=True, comment='补全token数'),
    sa.Column('total_tokens', sa.Integer(), nullable=True, comment='总token数'),
    sa.Column('estimated_cost_usd', sa.Float(), nullable=True, comment='预估成本(美元)'),
    sa.Column('actual_cost_usd', sa.Float(), nullable=True, comment='实际成本(美元)'),
    sa.Column('provider_rate_per_1k_tokens', sa.Float(), nullable=True, comment='提供商费率(每1K tokens, 美元)'),
    sa.Column('cost_optimization_applied', sa.Boolean(), nullable=True, comment='是否应用了成本优化'),
    sa.Column('request_timestamp', sa.DateTime(), nullable=False, comment='请求时间'),
    sa.Column('response_timestamp', sa.DateTime(), nullable=True, comment='响应时间'),
    sa.Column('actual_latency_ms', sa.Float(), nullable=True, comment='实际响应延迟(毫秒)'),
    sa.Column('estimated_latency_ms', sa.Float(), nullable=True, comment='预估响应延迟(毫秒)'),
    sa.Column('tools_used', sa.Text(), nullable=True, comment='使用的工具列表(JSON数组)'),
    sa.Column('tool_call_count', sa.Integer(), nullable=True, comment='工具调用次数'),
    sa.Column('user_satisfaction', sa.Integer(), nullable=True, comment='用户满意度评分(1-5)'),
    sa.Column('user_feedback', sa.Text(), nullable=True, comment='用户反馈文本'),
    sa.Column('error_occurred', sa.Boolean(), nullable=True, comment='是否发生错误'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='错误信息'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='记录创建时间'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_ai_metrics_complexity_provider', 'ai_request_metrics', ['complexity_score', 'provider_used'], unique=False)
    op.create_index('ix_ai_metrics_cost', 'ai_request_metrics', ['actual_cost_usd'], unique=False)
    op.create_index('ix_ai_metrics_provider_created', 'ai_request_metrics', ['provider_used', 'created_at'], unique=False)
    op.create_index('ix_ai_metrics_user_created', 'ai_request_metrics', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_ai_request_metrics_actual_cost_usd'), 'ai_request_metrics', ['actual_cost_usd'], unique=False)
    op.create_index(op.f('ix_ai_request_metrics_complexity_score'), 'ai_request_metrics', ['complexity_score'], unique=False)
    op.create_index(op.f('ix_ai_request_metrics_conversation_id'), 'ai_request_metrics', ['conversation_id'], unique=False)
    op.create_index(op.f('ix_ai_request_metrics_id'), 'ai_request_metrics', ['id'], unique=False)
    op.create_index(op.f('ix_ai_request_metrics_intent_type'), 'ai_request_metrics', ['intent_type'], unique=False)
    op.create_index(op.f('ix_ai_request_metrics_provider_used'), 'ai_request_metrics', ['provider_used'], unique=False)
    op.create_index(op.f('ix_ai_request_metrics_request_timestamp'), 'ai_request_metrics', ['request_timestamp'], unique=False)
    op.create_index(op.f('ix_ai_request_metrics_total_tokens'), 'ai_request_metrics', ['total_tokens'], unique=False)
    op.create_index(op.f('ix_ai_request_metrics_user_id'), 'ai_request_metrics', ['user_id'], unique=False)
    op.alter_column('users', 'coach_selection',
               existing_type=postgresql.ENUM('mentor', 'coach', 'doctor', 'zen', 'sage', 'companion', 'expert', name='coach_type'),
               server_default='companion',
               existing_comment='AI教练类型选择',
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'coach_selection',
               existing_type=postgresql.ENUM('mentor', 'coach', 'doctor', 'zen', 'sage', 'companion', 'expert', name='coach_type'),
               server_default=sa.text("'coach'::coach_type"),
               existing_comment='AI教练类型选择',
               existing_nullable=False)
    op.drop_index(op.f('ix_ai_request_metrics_user_id'), table_name='ai_request_metrics')
    op.drop_index(op.f('ix_ai_request_metrics_total_tokens'), table_name='ai_request_metrics')
    op.drop_index(op.f('ix_ai_request_metrics_request_timestamp'), table_name='ai_request_metrics')
    op.drop_index(op.f('ix_ai_request_metrics_provider_used'), table_name='ai_request_metrics')
    op.drop_index(op.f('ix_ai_request_metrics_intent_type'), table_name='ai_request_metrics')
    op.drop_index(op.f('ix_ai_request_metrics_id'), table_name='ai_request_metrics')
    op.drop_index(op.f('ix_ai_request_metrics_conversation_id'), table_name='ai_request_metrics')
    op.drop_index(op.f('ix_ai_request_metrics_complexity_score'), table_name='ai_request_metrics')
    op.drop_index(op.f('ix_ai_request_metrics_actual_cost_usd'), table_name='ai_request_metrics')
    op.drop_index('ix_ai_metrics_user_created', table_name='ai_request_metrics')
    op.drop_index('ix_ai_metrics_provider_created', table_name='ai_request_metrics')
    op.drop_index('ix_ai_metrics_cost', table_name='ai_request_metrics')
    op.drop_index('ix_ai_metrics_complexity_provider', table_name='ai_request_metrics')
    op.drop_table('ai_request_metrics')
    # ### end Alembic commands ###
